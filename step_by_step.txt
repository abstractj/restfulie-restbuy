rails new restbuy
cd restbuy
git init
rails g scaffold product name:string price:decimal
rails g model item product_id:integer quantity:integer order_id:integer
rails g scaffold order address:string state:string
rails g model payment value:decimal order_id:integer card_number:string card_holder:string state:string
gc "system models in place"


# jquery
curl -L http://code.jquery.com/jquery-1.4.2.min.js > public/javascripts/jquery.js
curl -L http://github.com/rails/jquery-ujs/raw/master/src/rails.js > public/javascripts/rails.js
curl -L http://github.com/cairesvs/formfy/raw/master/formfy.js > public/javascripts/formfy.js

# application.rb
descomenta a linha de javascript, adiciona formfy

config.action_controller.allow_forgery_protection    = false



rails g migration insert_sample_products
echo "class InsertSampleProducts < ActiveRecord::Migration
  def self.up
		Product.create :name => 'Apple macbook pro', :price => 1000
		Product.create :name => 'Rest Training (20h)', :price => 800
		Product.create :name => 'Modern Software architecture and Design (20h)', :price => 800
		Product.create :name => 'Ipad', :price => 600
		Product.create :name => 'Audi TT', :price => 40000
		Product.create :name => 'Flowers', :price => 20
  end

  def self.down
		Product.delete_all
  end
end" > db/migrate/*_insert_sample_products*

rake db:create db:migrate
gc "database created"

rails g controller System logout
rails g controller Payments create
rails g controller Admin index update_payment update_order


4 min/question in each part

SLIDES
http://caelumobjects.com/training/

# PART 1: 15 minutes: tag 1-webbuy
Presenting a server:
- create
- pay
- admin: unpaid, refused, preparing
- admin: preparing -> delivering
- delivering -> delivered, failed to deliver
- cancel
- share payment between friends
- search

# PART 2: 15 minutes: tag 2-opensearch
suporta opensearch, mostra cliente
curl http://localhost:3000/products/opensearch.xml
curl http://localhost:3000/products?q=apple\&format=atom
curl http://localhost:3000/products?q=\&format=atom

# client_spec.rb

# PART 3: 15 minutes: tag 3-create-basket
creates and redirects to the basket

# PART 5: 10 minutes: tag 5-restfulie-atom
serving atom
simpler tokamak builder

# PART 6: 5 minutes: tag 6-restfulie-json-xml
serving xml and json with restfulie products

# PART 7: 15 minutes: tag 7-add-product
picks the first product from the search and adds to the basket

# PART 8: 10 minutes: 8-its-time-to-pay
payment time

# PART 9: 10 minutes: 9-polling-print-my-receipt
polling every 10 secs until its confirmed

# PART 10: 5 minutes: 10-refresh-me-baby
refresh = self.follow.get

# PART 11: 15 minutes: 11-retry-payment
try to repay up twice

# PART 12: 15 minutes: 12-cancel
if is unable to do it, cancel

# PART 13: 15 minutes: 13-cache-control
client side cache
curl http://localhost:3000/products/1.xml -i

# PART 14: 10 minutes: 14-create-trait
server create is a trait
show created Trait code
curl http://localhost:3000/products -H "Content-type: application/xml" -H "Accept: application/xml" -d "<product><name>architecture by architects</name><price>300</price></product>" -i

# PART 15: 2 minutes: 15-created-trait-exists
extract it

# PART 16: 10 minutes: 16-share-payment
share the payment with a friend

# PART 17: 10 minutes: 17-calendar
rails g controller Calendar show
curl http://localhost:3000/orders/192.xml -i
curl http://localhost:3000/orders/192/calendar -i

# PART 18: 10 minutes: 18-add-calendar-tracking-and-cancel
link cancel, order, receipt, tracking
comment on link header






# PART 19: 10 minutes: 19-show-content-in-other-system
gem install heroku
show information on tracking and cancel at heroku

# PART 20: 10 minutes: 19-add-calendar-suggestion-with-form
extra suggestion with form
every time the person opens any of his system, he breathes your system
2 days after delivery, suggest a new product through his calendar

i.e. in his company system and sees his training, he would
be able to recommend it to someone, or enroll to other trainings, see his colleages emails and os on













# PART : 10 minutes: -error-handling
with mikyung

# PART : 10 minutes: supporting a profile 

refactoring
# PART : 10 minutes: supporting PATCH
# PART 14: relata
# PART 15: opensearchie

# PART 16: search in another site
extensao usa opensearch para comprar em varios:
adicionar um outro site sem ser a "amazon"
escolhe o mais barato






delegating part of the system (payment example)
-- create another system that accepts the payment
-- delegate the payment status method for that system







# PART 14: 5 minutes: 14-cache-polling
conditional request on GET
sudo varnishd -a 127.0.0.1:1500 -b 127.0.0.1:3000 -s file,/tmp,500M
curl http://localhost:3000/orders/1.xml -i

# PART XX
conditional request: PUT





RELAXNG example: must ignore, forward compatibility

so far:
presentation: 40min
tutorial: 2h 10 min
questions: 44 min

restfulie internal client
restfulie java,c #, javascript

tag use URI as id













# PART 18
AUTHentication

# PART 19
AUTHorization











THEORY importante fault tolerant: retry to send a post request if broken but with the correct id
tag WEBSOCKET integration event
tag RSS feed event
tag easier render all activerecord fields
tag use xml profiles
tag using uris as ids
tag use-form-to-add uses a form to add an item to the basket
tag extensao callback: so comentar

tag use forms on creation

extensao finances:
ask for auth from bank, use this auth to send to the guy, which authroizes with the bank
interface to try a second time

extensao 5:
a propria "amazon" delega para outro produto, ganhando uma % de comissao
????????????????

extensao 7:
cliente automatizado tambem olha recomendacoes antes de efetuar a compra e manda email com essas recomendacoes

